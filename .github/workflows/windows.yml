name: Windows

on:
  push:
    branches:
      - master
      - 'Stable*'
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'CMakeLists.txt'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64]

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: SarajDroneTech-installer.exe
      PACKAGE: SarajDroneTech
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      CPM_SOURCE_CACHE: ${{ github.workspace }}\cpm_modules

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Initial Setup
        uses: ./.github/actions/common

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      - name: Setup Caching
        uses: ./.github/actions/cache
        with:
          host: windows
          target: win64_msvc2022_64
          build-type: ${{ matrix.BuildType }}
          cpm-modules: ${{ env.CPM_SOURCE_CACHE }}

      - name: Install Qt for Windows (x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install NSIS
        shell: pwsh
        run: |
          Write-Host "Downloading NSIS installer..."
          $nsisUrl = "https://sourceforge.net/projects/nsis/files/NSIS%203/3.09/nsis-3.09-setup.exe/download"
          $installPath = Join-Path $env:TEMP "nsis-setup.exe"
          
          # Download with retry logic
          $maxRetries = 3
          $retryCount = 0
          $success = $false
          
          do {
              try {
                  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                  Invoke-WebRequest -Uri $nsisUrl -OutFile $installPath -UseBasicParsing
                  if (Test-Path $installPath) {
                      $success = $true
                      Write-Host "Download successful"
                  }
              }
              catch {
                  $retryCount++
                  Write-Warning "Download attempt $retryCount failed: $_"
                  Start-Sleep -Seconds 5
              }
          } while (-not $success -and $retryCount -lt $maxRetries)
          
          if (-not $success) {
              throw "Failed to download NSIS installer after $maxRetries attempts"
          }
          
          Write-Host "Installing NSIS..."
          $process = Start-Process -FilePath $installPath -ArgumentList '/S' -Wait -PassThru
          if ($process.ExitCode -ne 0) {
              throw "NSIS installation failed with exit code $($process.ExitCode)"
          }
          
          Write-Host "Adding NSIS to PATH..."
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify installation
          if (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe") {
              Write-Host "NSIS installed successfully"
          } else {
              throw "NSIS installation verification failed"
          }

      # Alternative NSIS installation using Chocolatey if the above fails
      - name: Install NSIS (Fallback)
        if: failure()
        shell: pwsh
        run: |
          Write-Host "Installing NSIS using Chocolatey..."
          choco install nsis -y --version=3.09
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../msvc2022_64"
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}
              -DCPACK_GENERATOR="NSIS"
              -DCMAKE_INSTALL_PREFIX="${{ runner.temp }}\shadow_build_dir\install"

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Create Installer
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cpack -G NSIS --config CPackConfig.cmake

      - name: List Build Directory
        shell: pwsh
        run: |
          Write-Host "Listing ${{ runner.temp }}\shadow_build_dir"
          Get-ChildItem -Recurse "${{ runner.temp }}\shadow_build_dir"

      - name: Create Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ runner.temp }}\shadow_build_dir\${{ env.PACKAGE }}-*-win64.exe
            ${{ runner.temp }}\shadow_build_dir\${{ env.ARTIFACT }}
            ${{ runner.temp }}\shadow_build_dir\install\${{ env.ARTIFACT }}
            ${{ runner.temp }}\shadow_build_dir\_CPack_Packages\win64\NSIS\${{ env.PACKAGE }}*.exe
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}
          name: ${{ github.ref_type == 'tag' && format('Release {0}', github.ref_name) || 'Development Build' }}
          prerelease: ${{ github.ref_type != 'tag' }}
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

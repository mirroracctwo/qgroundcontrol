name: Windows

on:
  push:
    branches:
      - master
      - 'Stable*'
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'CMakeLists.txt'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64]

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: SarajDroneTech-installer.exe
      PACKAGE: SarajDroneTech
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      CPM_SOURCE_CACHE: ${{ github.workspace }}\cpm_modules

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Initial Setup
        uses: ./.github/actions/common

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      - name: Setup Caching
        uses: ./.github/actions/cache
        with:
          host: windows
          target: win64_msvc2022_64
          build-type: ${{ matrix.BuildType }}
          cpm-modules: ${{ env.CPM_SOURCE_CACHE }}

      - name: Install Qt for Windows (x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../msvc2022_64"
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Deploy Qt Dependencies
        working-directory: ${{ runner.temp }}\shadow_build_dir\Release
        run: |
          ${{ env.QT_ROOT_DIR }}\bin\windeployqt.exe --qmldir ${{ github.workspace }}\src QGroundControl.exe --verbose=2 --release --compiler-runtime --no-system-d3d-compiler --no-opengl-sw

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Copy Dependencies
        shell: pwsh
        run: |
          $targetPath = "${{ runner.temp }}\shadow_build_dir\Release"
          
          # Copy GStreamer DLLs and dependencies
          $gstPaths = @(
            "C:\gstreamer\1.0\msvc_x86_64\bin",
            "C:\gstreamer\1.0\msvc_x86_64\lib\gstreamer-1.0"
          )
          
          foreach ($gstPath in $gstPaths) {
            if (Test-Path $gstPath) {
              Write-Host "Copying from $gstPath"
              Copy-Item "$gstPath\*.dll" -Destination $targetPath
              if (Test-Path "$gstPath\*.gst") {
                Copy-Item "$gstPath\*.gst" -Destination $targetPath
              }
            }
          }
          
          # Copy Visual C++ Runtime DLLs
          $vcruntimeDlls = @(
            "msvcp140.dll",
            "msvcp140_1.dll",
            "msvcp140_2.dll",
            "vcruntime140.dll",
            "vcruntime140_1.dll",
            "concrt140.dll"
          )
          
          foreach ($dll in $vcruntimeDlls) {
            $systemDll = "C:\Windows\System32\$dll"
            if (Test-Path $systemDll) {
              Copy-Item $systemDll -Destination $targetPath
              Write-Host "Copied $dll"
            } else {
              Write-Host "Warning: Could not find $dll"
            }
          }
          
          # Copy DirectX Runtime
          $dxDlls = @(
            "d3dcompiler_47.dll",
            "d3dx9_43.dll"
          )
          foreach ($dll in $dxDlls) {
            $systemDll = "C:\Windows\System32\$dll"
            if (Test-Path $systemDll) {
              Copy-Item $systemDll -Destination $targetPath
              Write-Host "Copied $dll"
            }
          }
          
          # Create plugins directory and copy Qt plugins if not already done by windeployqt
          $pluginsDir = Join-Path $targetPath "plugins"
          if (-not (Test-Path $pluginsDir)) {
            New-Item -ItemType Directory -Path $pluginsDir -Force
            Copy-Item "${{ env.QT_ROOT_DIR }}\plugins\*" -Destination $pluginsDir -Recurse -Force
          }

      - name: Verify Critical Files
        shell: pwsh
        run: |
          $targetPath = "${{ runner.temp }}\shadow_build_dir\Release"
          $criticalFiles = @(
            "QGroundControl.exe",
            "msvcp140.dll",
            "vcruntime140.dll"
          )
          
          foreach ($file in $criticalFiles) {
            if (Test-Path "$targetPath\$file") {
              Write-Host "✓ Found $file"
            } else {
              Write-Host "✗ Missing $file"
              exit 1
            }
          }
          
          Write-Host "Total files in release directory:"
          Get-ChildItem $targetPath -Recurse | Measure-Object | Select-Object -ExpandProperty Count

      - name: Upload Build File
        if: matrix.BuildType == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}
          path: |
            ${{ runner.temp }}\shadow_build_dir\Release\**
            !${{ runner.temp }}\shadow_build_dir\Release\*.cpp
            !${{ runner.temp }}\shadow_build_dir\Release\*.h
            !${{ runner.temp }}\shadow_build_dir\Release\*.obj
            !${{ runner.temp }}\shadow_build_dir\Release\*.pdb
          retention-days: 90

      - name: Create Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ runner.temp }}\shadow_build_dir\staging\**
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}
          name: ${{ github.ref_type == 'tag' && format('Release {0}', github.ref_name) || 'Development Build' }}
          prerelease: ${{ github.ref_type != 'tag' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

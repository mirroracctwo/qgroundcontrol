name: Windows

on:
  push:
    branches:
      - master
      - 'Stable*'
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'CMakeLists.txt'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64]

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: SarajDroneTech-installer.exe
      PACKAGE: SarajDroneTech
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      CPM_SOURCE_CACHE: ${{ github.workspace }}\cpm_modules

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Initial Setup
        uses: ./.github/actions/common

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}
          architecture: x86_64

      - name: Setup Caching
        uses: ./.github/actions/cache
        with:
          host: windows
          target: win64_msvc2022_64
          build-type: ${{ matrix.BuildType }}
          cpm-modules: ${{ env.CPM_SOURCE_CACHE }}

      - name: Install Qt for Windows (x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}/../msvc2022_64"
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=${{ github.ref_type == 'tag' || contains(github.ref, 'Stable') && 'ON' || 'OFF' }}

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Install NSIS
        run: |
          choco install nsis -y
          echo "NSIS_ROOT=C:\Program Files (x86)\NSIS" >> $GITHUB_ENV

      - name: Deploy Qt Dependencies
        working-directory: ${{ runner.temp }}\shadow_build_dir\Release
        run: |
          ${{ env.QT_ROOT_DIR }}\bin\windeployqt.exe --qmldir ${{ github.workspace }}\src SarajDroneTech.exe --verbose=2 --release --compiler-runtime --no-system-d3d-compiler --no-opengl-sw

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Copy Dependencies
        shell: pwsh
        run: |
          $targetPath = "${{ runner.temp }}\shadow_build_dir\Release"
          
          # Copy GStreamer binaries and plugins using the environment variable
          $gstRoot = $env:GSTREAMER_1_0_ROOT_MSVC_X86_64
          $gstBinPath = Join-Path $gstRoot "bin"
          $gstPluginsPath = Join-Path $gstRoot "lib\gstreamer-1.0"
          
          Write-Host "GStreamer Root: $gstRoot"
          Write-Host "GStreamer Bin Path: $gstBinPath"
          Write-Host "GStreamer Plugins Path: $gstPluginsPath"
          
          # Create plugins directory
          $pluginsDir = Join-Path $targetPath "gstreamer-1.0"
          New-Item -ItemType Directory -Force -Path $pluginsDir
          
          # Verify paths exist before copying
          if (Test-Path $gstBinPath) {
            Write-Host "Copying GStreamer binaries from $gstBinPath"
            Copy-Item "$gstBinPath\*.dll" -Destination $targetPath
          } else {
            Write-Host "Error: GStreamer bin path not found: $gstBinPath"
            exit 1
          }
          
          if (Test-Path $gstPluginsPath) {
            Write-Host "Copying GStreamer plugins from $gstPluginsPath"
            Copy-Item "$gstPluginsPath\*.dll" -Destination $pluginsDir
          } else {
            Write-Host "Error: GStreamer plugins path not found: $gstPluginsPath"
            exit 1
          }
          
          # Copy Visual C++ Runtime
          $vcruntimeDlls = @(
            "msvcp140.dll",
            "vcruntime140.dll",
            "vcruntime140_1.dll"
          )
          
          foreach ($dll in $vcruntimeDlls) {
            $systemDll = "C:\Windows\System32\$dll"
            if (Test-Path $systemDll) {
              Copy-Item $systemDll -Destination $targetPath
              Write-Host "Copied $dll"
            } else {
              Write-Host "Warning: Could not find $dll"
            }
          }
          
          # List contents to verify
          Write-Host "`nContents of target directory:"
          Get-ChildItem $targetPath -Recurse | Select-Object FullName

      - name: List Directory Contents
        shell: pwsh
        run: |
          Write-Host "Contents of Release directory:"
          Get-ChildItem "${{ runner.temp }}\shadow_build_dir\Release" -Recurse

      - name: Create Installer
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: |
          mkdir staging
          xcopy /E /I /Y Release\* staging\
          
          # Verify staging directory contents
          dir /s /b staging > staging_contents.txt
          type staging_contents.txt
          
          echo !define APP_NAME "${{ env.PACKAGE }}" > installer.nsi
          echo !define APP_VERSION "1.0.0" >> installer.nsi
          echo !define INSTALLER_NAME "${{ env.ARTIFACT }}" >> installer.nsi
          
          echo OutFile "${{ env.ARTIFACT }}" >> installer.nsi
          echo InstallDir "$PROGRAMFILES64\${{ env.PACKAGE }}" >> installer.nsi
          
          echo Section "Install" >> installer.nsi
          echo SetOutPath "$INSTDIR" >> installer.nsi
          echo File /r "staging\*.*" >> installer.nsi
          echo CreateDirectory "$SMPROGRAMS\${{ env.PACKAGE }}" >> installer.nsi
          echo CreateShortCut "$SMPROGRAMS\${{ env.PACKAGE }}\${{ env.PACKAGE }}.lnk" "$INSTDIR\SarajDroneTech.exe" >> installer.nsi
          echo WriteUninstaller "$INSTDIR\uninstall.exe" >> installer.nsi
          echo SectionEnd >> installer.nsi
          
          echo Section "Uninstall" >> installer.nsi
          echo RMDir /r "$INSTDIR" >> installer.nsi
          echo RMDir /r "$SMPROGRAMS\${{ env.PACKAGE }}" >> installer.nsi
          echo SectionEnd >> installer.nsi
          
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi

      - name: Upload Installer
        if: matrix.BuildType == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}-installer
          path: ${{ runner.temp }}\shadow_build_dir\${{ env.ARTIFACT }}
          retention-days: 90

      - name: Create Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ runner.temp }}\shadow_build_dir\${{ env.ARTIFACT }}
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}
          name: ${{ github.ref_type == 'tag' && format('Release {0}', github.ref_name) || 'Development Build' }}
          prerelease: ${{ github.ref_type != 'tag' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

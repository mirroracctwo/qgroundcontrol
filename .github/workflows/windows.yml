name: Windows Build

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'resources/icons/**'
  pull_request:
    paths:
      - '.github/workflows/windows.yml'
      - 'deploy/windows/**'
      - 'src/**'
      - 'cmake/**'
      - 'CMakeLists.txt'
      - 'resources/icons/**'

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        BuildType: [Release]
        Arch: [x64]

    defaults:
      run:
        shell: cmd

    env:
      ARTIFACT: SarajDroneTech-installer.exe
      PACKAGE: SarajDroneTech-installer
      QT_VERSION: 6.8.1
      GST_VERSION: 1.22.12
      CPM_SOURCE_CACHE: ${{ github.workspace }}\cpm_modules

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-tags: true

      - name: Initial Setup
        uses: ./.github/actions/common

      - name: Install Vulkan
        working-directory: ${{ runner.temp }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe" -OutFile vulkan-sdk.exe
          .\vulkan-sdk.exe --root C:\VulkanSDK\latest --accept-licenses --default-answer --confirm-command install com.lunarg.vulkan.glm com.lunarg.vulkan.volk com.lunarg.vulkan.vma com.lunarg.vulkan.debug
          echo "VULKAN_SDK=C:\VulkanSDK\latest" >> $env:GITHUB_ENV

      - name: Install GStreamer
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: ${{ env.GST_VERSION }}

      - name: Setup Caching
        uses: ./.github/actions/cache
        with:
          host: windows
          target: win64_msvc2022_64
          build-type: ${{ matrix.BuildType }}
          cpm-modules: ${{ env.CPM_SOURCE_CACHE }}

      - name: Install Qt for Windows (x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          aqtversion: ==3.1.19
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          modules: qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors

      - name: Set up Visual Studio shell
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: ${{ env.QT_ROOT_DIR }}/bin/qt-cmake -S ${{ github.workspace }} -B . -G Ninja
              -DCMAKE_BUILD_TYPE=${{ matrix.BuildType }}
              -DQT_HOST_PATH="${{ env.QT_ROOT_DIR }}"
              -DQT_DEBUG_FIND_PACKAGE=ON
              -DQGC_STABLE_BUILD=OFF

      - name: Build
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --build . --target all --config ${{ matrix.BuildType }}

      - name: Install
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cmake --install . --config ${{ matrix.BuildType }}

      - name: Package
        working-directory: ${{ runner.temp }}\shadow_build_dir
        run: cpack -G NSIS --config CPackConfig.cmake

      - name: List Build Directory
        shell: pwsh
        run: |
          Write-Host "Searching for installer file..."
          Write-Host "Contents of shadow_build_dir:"
          Get-ChildItem -Path "${{ runner.temp }}\shadow_build_dir" -Recurse | Select-Object FullName
          Write-Host "`nSearching for .exe files:"
          Get-ChildItem -Path "${{ runner.temp }}\shadow_build_dir" -Recurse -Filter "*.exe" | Select-Object FullName

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}
          path: ${{ runner.temp }}\shadow_build_dir\${{ env.ARTIFACT }}
          if-no-files-found: error
